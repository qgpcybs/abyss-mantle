// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct PathData {
  uint32 fromX;
  uint32 fromY;
  uint32 toX;
  uint32 toY;
  uint40 lastUpdated;
  uint40 duration;
}

library Path {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "", name: "Path", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x7462000000000000000000000000000050617468000000000000000000000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x001a060004040404050500000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (bytes32)
  Schema constant _keySchema = Schema.wrap(0x002001005f000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint32, uint32, uint32, uint32, uint40, uint40)
  Schema constant _valueSchema = Schema.wrap(0x001a060003030303040400000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "entityId";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](6);
    fieldNames[0] = "fromX";
    fieldNames[1] = "fromY";
    fieldNames[2] = "toX";
    fieldNames[3] = "toY";
    fieldNames[4] = "lastUpdated";
    fieldNames[5] = "duration";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get fromX.
   */
  function getFromX(bytes32 entityId) internal view returns (uint32 fromX) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get fromX.
   */
  function _getFromX(bytes32 entityId) internal view returns (uint32 fromX) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set fromX.
   */
  function setFromX(bytes32 entityId, uint32 fromX) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((fromX)), _fieldLayout);
  }

  /**
   * @notice Set fromX.
   */
  function _setFromX(bytes32 entityId, uint32 fromX) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((fromX)), _fieldLayout);
  }

  /**
   * @notice Get fromY.
   */
  function getFromY(bytes32 entityId) internal view returns (uint32 fromY) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get fromY.
   */
  function _getFromY(bytes32 entityId) internal view returns (uint32 fromY) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set fromY.
   */
  function setFromY(bytes32 entityId, uint32 fromY) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((fromY)), _fieldLayout);
  }

  /**
   * @notice Set fromY.
   */
  function _setFromY(bytes32 entityId, uint32 fromY) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((fromY)), _fieldLayout);
  }

  /**
   * @notice Get toX.
   */
  function getToX(bytes32 entityId) internal view returns (uint32 toX) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get toX.
   */
  function _getToX(bytes32 entityId) internal view returns (uint32 toX) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set toX.
   */
  function setToX(bytes32 entityId, uint32 toX) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((toX)), _fieldLayout);
  }

  /**
   * @notice Set toX.
   */
  function _setToX(bytes32 entityId, uint32 toX) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((toX)), _fieldLayout);
  }

  /**
   * @notice Get toY.
   */
  function getToY(bytes32 entityId) internal view returns (uint32 toY) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get toY.
   */
  function _getToY(bytes32 entityId) internal view returns (uint32 toY) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set toY.
   */
  function setToY(bytes32 entityId, uint32 toY) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((toY)), _fieldLayout);
  }

  /**
   * @notice Set toY.
   */
  function _setToY(bytes32 entityId, uint32 toY) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((toY)), _fieldLayout);
  }

  /**
   * @notice Get lastUpdated.
   */
  function getLastUpdated(bytes32 entityId) internal view returns (uint40 lastUpdated) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint40(bytes5(_blob)));
  }

  /**
   * @notice Get lastUpdated.
   */
  function _getLastUpdated(bytes32 entityId) internal view returns (uint40 lastUpdated) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint40(bytes5(_blob)));
  }

  /**
   * @notice Set lastUpdated.
   */
  function setLastUpdated(bytes32 entityId, uint40 lastUpdated) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((lastUpdated)), _fieldLayout);
  }

  /**
   * @notice Set lastUpdated.
   */
  function _setLastUpdated(bytes32 entityId, uint40 lastUpdated) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((lastUpdated)), _fieldLayout);
  }

  /**
   * @notice Get duration.
   */
  function getDuration(bytes32 entityId) internal view returns (uint40 duration) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint40(bytes5(_blob)));
  }

  /**
   * @notice Get duration.
   */
  function _getDuration(bytes32 entityId) internal view returns (uint40 duration) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint40(bytes5(_blob)));
  }

  /**
   * @notice Set duration.
   */
  function setDuration(bytes32 entityId, uint40 duration) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((duration)), _fieldLayout);
  }

  /**
   * @notice Set duration.
   */
  function _setDuration(bytes32 entityId, uint40 duration) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((duration)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(bytes32 entityId) internal view returns (PathData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(bytes32 entityId) internal view returns (PathData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    bytes32 entityId,
    uint32 fromX,
    uint32 fromY,
    uint32 toX,
    uint32 toY,
    uint40 lastUpdated,
    uint40 duration
  ) internal {
    bytes memory _staticData = encodeStatic(fromX, fromY, toX, toY, lastUpdated, duration);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    bytes32 entityId,
    uint32 fromX,
    uint32 fromY,
    uint32 toX,
    uint32 toY,
    uint40 lastUpdated,
    uint40 duration
  ) internal {
    bytes memory _staticData = encodeStatic(fromX, fromY, toX, toY, lastUpdated, duration);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(bytes32 entityId, PathData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.fromX,
      _table.fromY,
      _table.toX,
      _table.toY,
      _table.lastUpdated,
      _table.duration
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(bytes32 entityId, PathData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.fromX,
      _table.fromY,
      _table.toX,
      _table.toY,
      _table.lastUpdated,
      _table.duration
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  ) internal pure returns (uint32 fromX, uint32 fromY, uint32 toX, uint32 toY, uint40 lastUpdated, uint40 duration) {
    fromX = (uint32(Bytes.getBytes4(_blob, 0)));

    fromY = (uint32(Bytes.getBytes4(_blob, 4)));

    toX = (uint32(Bytes.getBytes4(_blob, 8)));

    toY = (uint32(Bytes.getBytes4(_blob, 12)));

    lastUpdated = (uint40(Bytes.getBytes5(_blob, 16)));

    duration = (uint40(Bytes.getBytes5(_blob, 21)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (PathData memory _table) {
    (_table.fromX, _table.fromY, _table.toX, _table.toY, _table.lastUpdated, _table.duration) = decodeStatic(
      _staticData
    );
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(bytes32 entityId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(bytes32 entityId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    uint32 fromX,
    uint32 fromY,
    uint32 toX,
    uint32 toY,
    uint40 lastUpdated,
    uint40 duration
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(fromX, fromY, toX, toY, lastUpdated, duration);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint32 fromX,
    uint32 fromY,
    uint32 toX,
    uint32 toY,
    uint40 lastUpdated,
    uint40 duration
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(fromX, fromY, toX, toY, lastUpdated, duration);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(bytes32 entityId) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    return _keyTuple;
  }
}
